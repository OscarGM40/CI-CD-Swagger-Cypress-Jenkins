							PRACTICA ONE MOON TRAVELS AGENCY

Source One: https://www.youtube.com/watch?v=SdsaZ-t1QwA

Swagger es una herramienta dedicada al manejo de documentación en API REST.Ofrece doumentación manual,documentación automatizada,generación de casos de prueba,generación de código  y una interfaz en la nube.Tiene un IDE en linea(editor.swagger.io) y también lo puedo descargar??

						INTRO ARCHIVOS YAML

La documentación es swagger se basa en un archivo yaml.Un archivo yaml siempre se usa como un archivo de configuración,para configurar algo.

Se basa en pares de propiedad-valor separados por dos puntos(name: api)
Como valores puede tener strings,numbers(enteros o decimales),integers,booleans o un arreglo.
Como valor de una propiedad a veces puede ir otra propiedad.Para identificar que una propiedada va como valor de otra se hace uso de la identación:
Ejemplo:

  info: 
    title: API de viajes

En este caso info recibe la propiedad title como valor,asi que se identa una linea.Este conjunto se le conoce como objeto.

Cuando en un archivo yaml me encuentre con un guión medio éste hace referencia a que es una lista o arreglo.

					IDE EN LINEA SWAGGER

Para poder editar la documentación de mi proyecto lo primero es ir a editor.swagger.io y abrir el IDE en línea.
Parece que lo puedo descargar también desde aqui: https://swagger.io/tools/swagger-ui/download/
Investigar qué opción es mejor,ya que la segunda permite usar Swagger UI y Swagger HUB

IMPORTANTE: cuando es un post o put llevará la propiedad requestBody:
  
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyClientesPost'
        required: true

Y el schema tiene esto:
  schemas:

    BodyClientesPost:
      type: object
      properties:
        primer_nombre:
          type: string
          description: Primer nombre del cliente
        segundo_nombre:
          type: string
          description: Segundo nombre del cliente
        apellido_paterno:
          type: string
          description: Apellido paterno del cliente
        apellido_materno:
          type: string
          description: Apellido materno del cliente
        correo_electronico:
          type: string
          description: Email del cliente

Realmente no es muy complicado generar el archivo de documentación.Claro que son bastantes cosillas.Veamos un ejemplo sencillo:

										EJEMPLO SENCILLO

# version a utilizar
openapi: 3.0.1
# la propiedad info es necesaria en un archivo de documentación con swagger
info:
  # title y description proporcionan informacion
  title: API agencia de viajes MoonTravels
  description: Esta API se encarga de manejar la información de la base de datos de la empresa
  # se suele dar una versión de la API que estoy documentando
  version: 1.0.0 

# servers proporciona las url base de la api,en este ejemplo solo hay una
servers:
  - url: https://api.moontravesls/v1/clientes
# los tags son como agrupaciones de los diferentes servicios que proporciona ésta API.Solo tenemos clientes en este ejemplo
tags: 
  - name: clientes
    description: Este endpoint maneja toda la información relacionada con la información de los clientes.
# paths de la api
paths: 
  /:
    post:
      tags:
        - clientes
      summary: Inserta la data de un nuevo cliente en la BD.
      parameters:
      - $ref: '#/components/parameters/token' 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BodyClientesPost'
        required: true
      
      #en las responses se comienza con el codigo numerico como una propiedad
      responses:
        200:
          description: (OK) la información del cliente se ha guardado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitoClientesPost'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
  
  /{idCliente}:
    get:
    # especifico que pertenece a la tag(grupo) clientes
      tags:
        - clientes
      summary: obtiene un cliente basado en su ID
      parameters:
      - $ref: '#/components/parameters/token'
      - name: idCliente #mismo que arriba,en /{idCliente}
        in: path # in especifica donde encontrar el param y path que es un param de la URL
        description: identificador del cliente a obtener
        required: true
        schema:
          type: string
      responses:
        200:
          description: (Ok) la información del cliente se obtuvo correctamente
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ExitoClientesGet'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
          
  /actualiza/{idCliente}:
    put:
      tags:
      - clientes
      summary: Actualiza la información de un cliente en la DB
      parameters:
      - $ref: '#/components/parameters/token'
      - name: idCliente
        in : path
        description: identificador del cliente
        required: true
        schema:
          type: string
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BodyClientesPut'
        required: true
      responses:
        200:
          description: (Ok) La información del cliente se actualizó correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitoClientesPost'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
          
  /elimina/{idCliente}:
    delete:
      tags:
      - clientes
      summary: elimina a un cliente 
      parameters:
      - $ref: '#/components/parameters/token'
      - name: idCliente
        in: path
        description: identificador del cliente
        required: true
        schema:
          type: string
      responses:
        200:
          description: (Ok) La información del cliente se eliminó correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitoClientesPost'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
          
                
# puedo definir todo lo que voy a usar al final del archivo e ir tomando de aqui todo.Los schemas no son más que un conjunto de objetos que puedo mandar a referenciar cuando quiera          
components:
  responses:
    Unauthorized:
      description: (Unauthorized) No hay autorización suficiente para llamar al servicio
    NotFound:
      description: (NotFound) No se encontró la información
    BadRequest:
      description: (BadRequest) Los datos enviados son incorrectos o hay datos obligatorios no enviados
    ServerError:
      description: (ServerError) Error en el servidor
      
  parameters:
    token:
      in: header
      name: token
      description: Token de autenticación
      required: true
      schema:
        type: string
  
  schemas:
    
    BodyClientesPost:
      type: object
      properties:
        primer_nombre:
          type: string
          description: Primer nombre del cliente
        segundo_nombre:
          type: string
          description: Segundo nombre del cliente
        apellido_materno:
          type: string
          description: Apellido materno del cliente
        apellido_paterno:
          type: string
          description: Apellido paterno del cliente
        correo_electronico:
          type: string
          description: email del cliente
    
    ExitoClientesPost:
      type: object
      properties:
        respuesta:
          type: integer
          enum: [1]
          description: Bandera que nos indica si la llamada al servicio fue exitosa
        idCliente:
          type: integer
          enum: [222]
          description: Id que le corresponde al cliente,ahora usuario
    
    ExitoClientesGet:
      type: object
      properties:
        primer_nombre:
          type: string
          description: Primer nombre del cliente
        segundo_nombre:
          type: string
          description: Segundo nombre del cliente
        apellido_materno:
          type: string
          description: Apellido materno del cliente
        apellido_paterno:
          type: string
          description: Apellido paterno del cliente
        correo_electronico:
          type: string
          description: email del cliente
    
    BodyClientesPut:
      type: object
      properties:
        primer_nombre:
          type: string
          description: Primer nombre del cliente
        segundo_nombre:
          type: string
          description: Segundo nombre del cliente
        apellido_materno:
          type: string
          description: Apellido materno del cliente
        apellido_paterno:
          type: string
          description: Apellido paterno del cliente
        correo_electronico:
          type: string
          description: email del cliente
      
No parece muy complicado.Seguir avanzando.

						PRACTICA DOS

SourceTwo: https://www.youtube.com/watch?v=rIWGcxnVIA8

Swagger es una herramienta de doumentación profesional.Con swagger puedo automatizar en gran parte la generación de doumentación de los diferentes endpoints de mi API.
Dicha documentación es presentada a través de una UI servida por mi propia aplicación donde estarán listados todos los endpoints con su info(parametros por la URL,contenido del body a mandar,...)

NOTA:en su web https://swagger.io/ tengo 3 enlaces en unas Cards.El primero ponde OpenAPI Specification y me lleva a las versiones 2 y 3 de su documentación oficial.Lógicamente usaremos la versión 3.

Bien,el youtuber indica que hay que clonarse su repo y crear el .env con una mongoURi valida.

			INSTALANDO SWAGGER EN UN PROYECTO NODE

Algo que no hicimos en la primera práctica es instalar la libreria en un proyecto node.Además instalamos la libreria para obtener esa interfaz de usuario:
npm i swagger-jsdoc swagger-ui-express

Para usar esta libreria en node se usa como un middleware,pero hay que pasarle un objeto con la configuración.

/* Swagger settings */
const swaggerUi = require("swagger-ui-express");
const swaggerJsDoc = require("swagger-jsdoc");

/* puedo ver las que son required en la doc OAS version3 */
/* definition es requerida,es un objeto con las propiedades también requeridas openapi,info,servers y aparte también la prop apis para indicar donde estan los endpoints */
const swaggerInitialSpecs = {
  definition:{
    openapi: "3.0.0",
    info: {
      title: "NodeJS MongoDB API",
      version: "1.0.0",
      description: "NodeJS MongoDB API",
    },
    servers: 
    [
      {
        url: "http://localhost:9000",
        description: "Local server",
      },
    ],
  },
  apis:[`${path.join(__dirname,"./routes/*.js")}`],
}

/* el middleware para swagger lleva la ruta como primer arg y despues un par de middlewares.En swaggerUI.setup va la configuracion inicial,la cual la tiene el swaggerJSDOC */
app.use("/api-doc",
  swaggerUi.serve, //.serve para que sirva la UI
  swaggerUi.setup( swaggerJsDoc(swaggerInitialSpecs) ));

En cuanto tenga todo esto en un proyecto ya puedo visitar esta URL
http://localhost:9000/api-doc/ y veré de momento la interfaz vacía.
Fijate que puedo elegir servidores,claro que solo especificamos uno,pero podría haber especificado más de uno.Aparte veo mi título custom.
Lógicamente,hay que crear la documentación ahora.

			CREANDO LA DOCUMENTACIÓN PARA SWAGGER

Hay dos formas de agregar la documentación.La primera sería en cada ruta(en el routes.js) o también en un archivo externo con extensión .yaml o .json
Vamos a hacerlo inline al ser una API muy sencilla.

Para documentar 'inline' tengo que usar comentarios de bloque,pero con un asterisco en cada linea.Para sacarlos hay que teclear /** (con dos asteriscos) y ya VSC me pondrá un nuevo asterisco en cada linea  

Dentro de este bloque tengo que usar la 'annotations' @swagger para que swagger sepa que es para él ese bloque.Veamos un ejemplo definiendo un Schema:

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
  *        name:
  *          type: string
  *          description: The name of the user
  *        age:
  *          type: integer
  *          description: The age of the user
  *        email:
  *          type: string
  *          description: The email of the user
 *       required:
 *         - name
 *         - age
 *         - email
 *       example:
 *         name: John Doe
 *         age: 30
 *         email: alan@example.com
 */

NOTA :Fijate que simplemente he definido un Schema llamado User(es como un Schema de mongoose,o como va a lucir un User en mi API).Veamos ahora como documentar un endpoint(lo cual se traducirá en una ruta creada en la UI de swagger.

 /**
 * @swagger
 * /api/users:
 *  post:
 *    description: Create a new user
 *    tags: [User] #hay que asociar cada endpoint a un Schema
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *           $ref: '#/components/schemas/User'
 *    responses:
 *      201:
 *        description: User created
 */
Hay que recalcar que puedo incluso probar desde la interfaz cada endpoint(incluso lo va a crear en la base de datos,ojo).Desde luego es una herramienta muy profesional.
NOTA:cuando un schema es de type object(o sea,cuando devuelva un Object)  no hay que decir más pero si lo que devuelvo es un array hay que usar adicionalmente la propiedad items:

Si devuelvo un object:
  schema:
    type: object
    $ref: '#/components/schemas/User'
Y si el endpoint devuelve un array:
  schema:
    type: array
      items:
        $ref: '#/components/schemas/User'

Por lo demás vamos a documentar el GET,fijate que el requestBody no lleva pues es un get:
/**
 * @swagger
 * /api/users:
 *  post:
 *    summary: Create a new user
 *    tags: [User] #hay que asociar cada endpoint a un Schema
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            $ref: '#/components/schemas/User'
 *    responses:
 *      201:
 *        description: User created
 */

Puedo probarlo,etc,veamos ahora un PUT.Por ahora puedo ver que cada endpoint va a llevar las propiedades tags,summary,parameters? y requestBody?,estas dos opcionales, y por último responses.Fijate que al usar parameters tengo que usar un arreglo de ellos cada uno empezando con - in y name:
/**
 * @swagger
 * /api/users/{id}:
 *  get:
 *    tags: [User] # hay que asociar cada endpoint a un Schema
 *    summary: Given an Identificator retrieves one user
 *    parameters:
 *      - in: path
 *        name: id
 *        description: The id of the user
 *        required: true
 *        schema:
 *          type: string
 *    responses:
 *      200:
 *        description: Retrieves one user
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              $ref: '#/components/schemas/User'
 *      404:
 *        description: User not found
 */
Genial.Además hemos visto como agregar más respuestas.NOTA,puedo comentar dentro de estos bloques de comentarios para swagger:
 *       required:
 *         - name
 *         #- age
 *         - email
Solo hay que usar la almohadilla.

				PRACTICA TRES SWAGGER IN-DEPTH TUTORIAL

Source: https://www.youtube.com/watch?v=EnMQm365t_s


