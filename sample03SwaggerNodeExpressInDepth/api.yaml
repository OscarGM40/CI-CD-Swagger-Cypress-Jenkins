# esta persona usó swagger 2.0 pero también puede usarse openapi 3.0.1 como version de swagger
#swagger: "2.0"
openapi: "3.0.1"
info:
  title: Practica 03 Swagger In-Depth API
  description: This API is used to manage the information of the clients.
  version: 1.0.0
  # automáticamente se puede enviar un email
  contact:
    name: Jane
    email: janegarrapata@gmail.com
  # si hubiera licencias van aqui
  license:
    name: MIT
    url: "http://apache.org/licenses/LICENSE-2.0.html"
  #muchas veces tendré varios servers
servers:
- url: "http://localhost:3000/"
  description: This is the API on localhost.
- url: "http://mycompany.com/"
  description: Thi is the API on production.

# schemes: [http, https]
# 
tags: 
  - name: clientes
    description: Información de los clientes.
paths:
  # returns a String
  /string:
    get:
      tags:
        - clientes
      summary: "Returns a String"
      description: "Returns a String"
      responses:
        200:
          description: "Success.You will get the content"
          content:
            application/json:
              schema:
                type: string
                example: "Hello World"
        400:
          description: "Bad Request.You will get the error"
        500:
          description: "Internal Server Error.You will get the error"
  # returns an Object
  /user:
    get:
      tags:
        - clientes
      summary: "returns an Object"
      description: "Returns a single user"
      responses:
        200:
          description: "Success.User will be shown"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: "Jane"
                  lastName:
                    type: string
                    example: "Doe"
                  age:
                    type: integer
                    example: "30"
        400:
          description: "Bad Request.You will get the error"
        500:
          description: "Internal Server Error.You will get the error"
  # returns an Array
  /users:
    get:
      tags:
        - clientes
      summary: "Returns a List of Users"
      description: "Returns an array of objects"
      responses:
        200:
          description: "Success.Array is shown"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                      example: "Jane"
                    lastName:
                      type: string
                      example: "Doe"
                    age:
                      type: integer
                      example: 30
        400:
          description: "Bad Request.You will get the error"
        500:
          description: "Internal Server Error.You will get the error"
  # sending dynamic data through URL parameters
  /users/{userId}:
    get:
      tags:
        - clientes
      summary: "Returns a single user by ID"
      description: "Returns a single user given an ID"
      parameters:
        - in: path
          name: userId
          description: "User's ID"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Success.User will be shown"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    example: "Jane"
                  lastName:
                    type: string
                    example: "Doe"
                  age:
                    type: integer
                    example: 30
  # sending a body
  /create:
    post:
      tags:
        - clientes
      summary: "Create a User"
      description: "Create a user given a Body"
      requestBody:
        description: "User's information for creation"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Jane"
                lastName:
                  type: string
                  example: "Garrapata"
                age:
                  type: integer
                  example: 22
      responses:
        200:
          description: "Success.User will be created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad Request.You will get the error"
        500:
          description: "Internal Server Error.You will get the error"
  # using query parameters
  /usersQuery:
    get:
      tags:
        - clientes
      summary: "Create a User with queryParams"
      description: "Create a user given a QueryParams"
      parameters:
        - in: query
          name: name
          description: "User's name"
          required: false
          schema:
            type: string
            enum: ["Jane", "John", "Mary"]
        - in: query
          name: lastName
          description: "User's last name"
          required: false
          schema:
            type: string
        - in: query
          name: age
          description: "User's age"
          required: false
          schema:
            type: integer
            enum: [20, 30, 40]
      responses:
        200:
          description: "Success.User will be created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad Request.You will get the error"
        500:
          description: "Internal Server Error.You will get the error"
  # file Upload
  /upload:
    post:
      tags:
        - clientes
      summary: "Upload a file"
      description: "Upload a file"
      parameters:
        - in: header
          name: token
          description: "Id of the user"
          required: true
          schema:
            type: string
      requestBody:
        description: "File to upload"
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                  example: "image.jpg"
      responses:
        200:
          description: "Success.File will be uploaded"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad Request.You will get the error"
        500:
          description: "Internal Server Error.You will get the error"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "Jane"
        lastName:
          type: string
          example: "Doe"
        age:
          type: integer
          example: 30