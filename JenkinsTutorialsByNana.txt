					JENKINS TUTORIAL FOR BEGINNERS BY NANA


Playlist: https://www.youtube.com/watch?v=pMO26j2OUME&list=PLy7NrYWoggjw_LIiDK1LXdNN82uYuuuiC&index=5&ab_channel=TechWorldwithNana
Repo:

				VIDEO 01 RUNNING JENKINS IN A CONTAINER

En este video vamos a configurar Jenkins usando un Docker container.
También crearemos un pipeline multi-branch con Git Repo
También veremos los tipos de Credentials que existen en Jenkins
Crearemos un Jenkinsfile para configurar ese pipeline

El contenedor lo puedo arrancar con docker run:

docker run -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts-jdk11

NOTA: Jenkins por defecto corre en el puerto 8080.El 50_000 es para comunicación interna entre Master/Slaves

Recuerda que tendré que leer los logs para ver la password.
Cuando arranque instalo los plugins sugeridos por el sistema.
Voy a dejar 'oscargm40' como user y la pass larga 01.

Tipos de tarea(item en inglés): 
Freestyle: simple,single task( like a test)
PIpeline: whole delivery cycle(test + build + deploy) For a single branch
Multibranch pipeline: like a pipeline but for multiple branches

IMPORTANTE: en proyectos muy grandes obviamente es una mejor opción ir por una instalación local de Jenkins,pero en proyectos más pequeños usar su contenedor y tener esta flexibilidad puede ser una mejor idea.

				VIDEO 02 CREATE MULTIBRANCH PIPELINE WITH GIT
 
NOTA: puedo instalar el plugin locale entrando al contenedor e instalandolo mediante la cli 'jenkinks-plugin-cli'.Ver documentación para ello.

Bien,creo un nuevo Item(job|tarea).Eligo multibranch pipeline.Tras elegir un tipo de job se abrirá el dashboard para configurar las opciones:

DisplayName y Description son sólo metadata.
BranchSource es el tipo de proyecto.Eligo git y le paso un repo cualquiera de momento.

Discover Branches: Dado que estoy en un multibranch project,puedo elegir ramas.Puedo pasar una regex para que las descubra jenkins.De momento que descubra todo.

Build Configuration: lo normal es que sea de un Jenkinsfile,de momento lo dejo asi

							CREDENTIALS

Obviamente Jenkins no va a poder conectarse a ese repositorio sin credenciales,sin autenticarse frente a GitHub.
El plugin Credential me permite almacenar y gestionar las credenciales de manera centralizada

Bien,lo importante es entender que las credenciales van a tener un scope.Por defecto ya hay un scope creado,de scope global llamado jenkins.

SCOPES:
System scope: only available on Jenkins Server(jenkins and nodes only).Este scope no es accesible por un Job,luego no lo vería en la pipeline que tengo

Global: accesible everywhere,por Jenkins,los Nodes,los items o jobs,cualquier pipeline...

Project: hay un tercer scope,que es limitado al proyecto.Este sólo viene con pipelines multibranch
Este scope es generado gracias al plugin 'folder',que permite organizar jobs en folders

TYPE OF CREDENTIAL:
El más común es Username & Password,aunque también hay SSH Username with Private Key(una Private Key para SSH),o un Secret file(supongo que texto encriptado).
Dependiendo de los plugins, pueden aparecer más opciones(como un GitHub Access Token type).
NOTA:el Id que le dé a una credential es importantísimo,pues es lo que voy a usar para referenciar la credential.

Bien,si voy a Dashboard/<project/credentials veré los scopes(los cuales tienen un nombre,en este caso el scope 'jenkins' y el scope 'NanaMBP'.El primero lo va a ver cualquier proyecto,el segundo es sólo para este proyecto.
Más arriba puedo ver que tengo una credencial de tipo global en cada scope.Claro que no me valen pues no son correctas.
Esto es muy bueno para restringir el ámbito de las credenciales a un proyecto,lo cual es mejor que tenerlas en todo el servidor.

Ya sí,creo unas credenciales en el scope del proyecto con mi username y password de Git, le doy un Id semántico y las selecciono en la configuración del proyecto.
Obviamente no hará nada,más que conectarse al repositorio exitosamente.

NOTA:puede ser que no quiera que descubra todas las branches,si quiero puedo agregarlas con una regex de Java(recuerda que Jenkins está sobre Java):
^master|develop|feature.*$ <- master,develop o feature+cualquier cosa

Puedo comprobar que si quito master sólo escaneó develop:
Checking branches...
  Checking branch develop
      ‘Jenkinsfile’ not found
    Does not meet criteria
Processed 2 branches <- procesó las dos,pero sólo busco en develop por el Jenkinsfile.Lo siguiente obviamente será crear ese archivo

			VIDEO 03 JENKINSFILE SYNTAX & REPLAY & RESTART

Voy al repo que tengo enlazado y creo un file.Lo llamo Jenkinsfile.Como template inicial puedo usar este código,que simplemente no hace nada:

pipeline {
  agent any
  stages {
    stage("build") {
      steps {
      }
    }
  }
}
LLegados a este punto tengo que saber un par de cosas sobre los files para Jenkins

						PIPELINE SYNTAX

Un archivo Jenkinsfile puede ser escrito de forma 'scripted' o de forma 'declarative'.
Scripted: fue la primera sintaxis disponible y usa el lenguaje Groovy.Al ser un lenguaje,es más potente y flexible que usar la forma declarativa,pero hay que aprender Groovy.

Declarative: es una adicción reciente,debido a la dificultad de aprender Groovy.Al no ser un lenguaje no es tan poderoso como Groovy.

Si uso la forma declarativa una template luce asi:
pipeline {
  agent any
  stages {
    stage("build"){
      steps {
      }
   }
}

"pipeline" debe estar en el top-level,al principio
"agent"- donde ejecutar
"stages"  - donde sucede el 'trabajo'
"stage" and "steps": formas de modularizar una task

Normalmente una pipeline estará formada por varias stages,que a su vez estarán formadas por varias stage.Fijate que cada stage("name") recibe un name

Dentro de cada step irán los scripts que se ejecutan en el Jenkins Server

Puedo crear un Jenkinsfile con cualquier echo a la consola y tratar de ver los logs.

Puedo ver también que ha creado varias zonas(estan en my-pipeline-master):
Declarative: Checkout SCM	build	test	deploy
La primera es declarative ya que he usado una aproximación declarativa.

					TEST A TASK

Imagina que un step tiene algo de Groovy y soy bastante nuevo con Groovy.O que no estoy seguro de cierto paso... Puedo testear esa task,llendo a una task ya ejecutada(ahora mismo está en NanaMBP/master/#1) y alli darle a replay,pero antes de darle a replay hago el cambio en la interfaz con lo que quiero testear(esa expresión Groovy,por ejemplo)

IMPORTANTE: para ejecutar código Groovy en una aproximación declarativa debo englobarlo entre la etiqueta script {} . Ejemplo:
pipeline {
  agent any
  stages {
    stage("build) {
      steps {
		echo 'building the application...'
        script {
          def test = 2 + 2 > 3 ? 'cool' : 'not-cool'
		  echo test
      }
    }
  }
}

No solo esto,sino que también tengo una opción restart from stage,donde puedo elegir desde que stage reiniciar un job,omitiendo los anteriores.Esto puede ser muy útil a veces.

				VIDEO 04 TRIGGERING JENKINS BUILD AUTOMATICALLY


